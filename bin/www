#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("server-semina:server");
const http = require("http");

const db = require("../app/database");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
db.on("error", function (err) {
    console.log("connection error: tidak bisa tersambung ke mongodb");
});

db.on("open", function () {
    debug("successfully connected to MongoDB");
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
});

/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(port);
// server.on("error", onError);
// server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind =
        typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
}

// Set app for gracefully shutdown...
function shutdown() {
    debug("signal kill received: shutting down HTTP server gracefully");
    server.close(() => {
        debug("HTTP server closed");
        process.exit(0);
    });
    db.close(false, () => {
        console.log("MongoDb connection closed.");
    });

    setTimeout(() => {
        debug("Could not close connections in time, forcefully shutting down");
        process.exit(1);
    }, 10000);
}

process.on("SIGTERM", shutdown);
process.on("SIGINT", shutdown);
